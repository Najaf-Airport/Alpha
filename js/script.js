// js/script.js (محدث بدون أخطاء)

import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js"; import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js"; import { getFirestore, collection, doc, setDoc, getDocs, query } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js"; import { exportSingleFlightToDocx, exportAdminDataToDocx } from "./docx-export.js";

const firebaseConfig = { apiKey: "AIzaSyAiU4-PvYgqnWbVLgISz73P9D4HaSIhW-o", authDomain: "najaf-filghts.firebaseapp.com", projectId: "najaf-filghts", storageBucket: "najaf-filghts.appspot.com", messagingSenderId: "41388459465", appId: "1:41388459465:web:9c67ef67f0ad4810e55418" };

const app = initializeApp(firebaseConfig); const auth = getAuth(app); const db = getFirestore(app); const ADMIN_EMAIL = "ahmedaltalqani@gmail.com";

// عناصر DOM let loginForm, emailInput, passwordInput, loginMessage; let logoutBtn, userEmailSpan; let welcomeMessage, flightFormsContainer, saveAllFlightsBtn, messageContainer, userPastFlightsTableBody, currentMonthNameSpan; let filterMonthInput, filterUserSelect, applyFiltersBtn, exportAdminStatsBtn, exportAdminAllFlightsBtn;

document.addEventListener("DOMContentLoaded", () => { logoutBtn = document.getElementById("logoutBtn"); userEmailSpan = document.getElementById("userEmail"); if (logoutBtn) logoutBtn.addEventListener("click", handleLogout);

if (document.getElementById("loginView")) { loginForm = document.getElementById("loginForm"); emailInput = document.getElementById("email"); passwordInput = document.getElementById("password"); loginMessage = document.getElementById("loginMessage"); if (loginForm) loginForm.addEventListener("submit", handleLogin); }

if (document.getElementById("flightsView")) { welcomeMessage = document.getElementById("welcomeMessage"); flightFormsContainer = document.getElementById("flightFormsContainer"); saveAllFlightsBtn = document.getElementById("saveAllFlightsBtn"); messageContainer = document.getElementById("messageContainer"); userPastFlightsTableBody = document.querySelector("#userPastFlightsTable tbody"); currentMonthNameSpan = document.getElementById("currentMonthName"); if (saveAllFlightsBtn) saveAllFlightsBtn.addEventListener("click", saveAllFlights); generateFlightForms(4); const today = new Date(); currentMonthNameSpan.textContent = today.toLocaleString("ar-IQ", { month: "long" }); }

if (document.getElementById("adminView")) { filterMonthInput = document.getElementById("filterMonth"); filterUserSelect = document.getElementById("filterUser"); applyFiltersBtn = document.getElementById("applyFiltersBtn"); exportAdminStatsBtn = document.getElementById("exportAdminStatsToWordBtn"); exportAdminAllFlightsBtn = document.getElementById("exportAdminAllFlightsToWordBtn"); if (applyFiltersBtn) applyFiltersBtn.addEventListener("click", () => loadAdminData()); if (exportAdminStatsBtn) exportAdminStatsBtn.addEventListener("click", () => exportAdminDataToDocx('stats', {}, filterMonthInput.value, filterUserSelect.value)); if (exportAdminAllFlightsBtn) exportAdminAllFlightsBtn.addEventListener("click", () => exportAdminDataToDocx('allFlights', {}, filterMonthInput.value, filterUserSelect.value)); const today = new Date(); filterMonthInput.value = ${today.getFullYear()}-${(today.getMonth()+1).toString().padStart(2,'0')}; }

onAuthStateChanged(auth, user => { if (user) { if (userEmailSpan) userEmailSpan.textContent = user.email; if (logoutBtn) logoutBtn.style.display = "inline-block"; if (user.email === ADMIN_EMAIL) { if (!window.location.pathname.includes("admin.html")) { window.location.href = "admin.html"; } else { loadAdminData(); } } else { if (!window.location.pathname.includes("flights.html")) { window.location.href = "flights.html"; } else { welcomeMessage.textContent = مرحباً بك، ${user.email}; loadUserFlights(user.uid); } } } else { if (!window.location.pathname.includes("index.html")) { window.location.href = "index.html"; } if (logoutBtn) logoutBtn.style.display = "none"; } }); });

async function handleLogin(e) { e.preventDefault(); try { await signInWithEmailAndPassword(auth, emailInput.value.trim(), passwordInput.value.trim()); } catch (err) { showMessage(loginMessage, "خطأ في البريد أو كلمة المرور.", true); } }

function handleLogout() { signOut(auth); }

function generateFlightForms(num) { flightFormsContainer.innerHTML = ""; for (let i = 0; i < num; i++) { const card = document.createElement("div"); card.className = "flight-card"; card.innerHTML = <h4>رحلة ${i + 1}</h4> + ['date','fltNo','onChocksTime','openDoorTime','startCleaningTime','completeCleaningTime','readyBoardingTime','startBoardingTime','completeBoardingTime','closeDoorTime','offChocksTime','notes'] .map(id => <div class="input-group"><label for="${id}-${i}">${id}</label><input type="${id === 'date' ? 'date' : id === 'notes' ? 'text' : 'time'}" id="${id}-${i}" name="${id}" ${id === 'date' ? value="${new Date().toISOString().split('T')[0]}" required : ''} /></div>) .join(''); flightFormsContainer.appendChild(card); } }

async function saveAllFlights() { const user = auth.currentUser; if (!user || user.email === ADMIN_EMAIL) return; const monthId = new Date().toISOString().slice(0, 7); const batchPromises = []; document.querySelectorAll(".flight-card").forEach(card => { const data = {}; card.querySelectorAll("input").forEach(inp => { data[inp.name] = inp.value; }); if (!data.date || !data.fltNo) return; const ref = doc(collection(db, "months", monthId, "users", user.uid, "flights")); batchPromises.push(setDoc(ref, { ...data, uid: user.uid, timestamp: new Date().toISOString(), userName: user.email })); }); try { await Promise.all(batchPromises); showMessage(messageContainer, "تم الحفظ بنجاح!", false); loadUserFlights(user.uid); } catch (err) { console.error(err); showMessage(messageContainer, "فشل حفظ الرحلات.", true); } }

async function loadUserFlights(userId) { userPastFlightsTableBody.innerHTML = ""; const monthId = new Date().toISOString().slice(0, 7); const q = query(collection(db, "months", monthId, "users", userId, "flights")); const snapshot = await getDocs(q); if (snapshot.empty) { const row = userPastFlightsTableBody.insertRow(); const cell = row.insertCell(); cell.colSpan = 13; cell.textContent = "لا توجد رحلات"; return; } snapshot.forEach(docSnap => { const f = docSnap.data(); const row = userPastFlightsTableBody.insertRow(); ["date","fltNo","onChocksTime","openDoorTime","startCleaningTime","completeCleaningTime","readyBoardingTime","startBoardingTime","completeBoardingTime","closeDoorTime","offChocksTime","notes"] .forEach(key => row.insertCell().textContent = f[key] || ""); const cell = row.insertCell(); const btn = document.createElement("button"); btn.textContent = "تصدير"; btn.onclick = () => exportSingleFlightToDocx(f); cell.appendChild(btn); }); }

function showMessage(el, msg, isError) { el.textContent = msg; el.style.color = isError ? "red" : "green"; }

